/*
 * This file was generated by the Gradle 'init' task.
 */

import groovy.sql.Sql

plugins {
    id 'java'
    id 'maven-publish'
}

repositories {
    mavenLocal()
    maven {
        url = uri('https://repo.maven.apache.org/maven2/')
    }
}


configurations {
 jdbcdriver
}

dependencies {
	jdbcdriver 'org.postgresql:postgresql:42.5.4'
    implementation 'org.rapidoid:rapidoid-quick:5.5.5'
    implementation 'com.opencsv:opencsv:5.5'
    implementation 'org.xerial:sqlite-jdbc:3.40.1.0'
    implementation 'org.postgresql:postgresql:42.5.4'
    implementation 'org.linguafranca.pwdb:KeePassJava2:2.1.4'
    implementation 'com.jcraft:jsch:0.1.55'
    implementation 'org.junit.jupiter:junit-jupiter-params:5.8.1'
    implementation 'com.google.code.gson:gson:2.8.5'
    testImplementation 'org.apache.sshd:sshd-core:0.14.0'
    // implementation 'org.mongodb:mongodb-jdbc:2.1.2' // struggles ... with jdbc
    // https://mvnrepository.com/artifact/org.mongodb/mongodb-driver-sync
    implementation 'org.mongodb:mongodb-driver-sync:4.11.2'

}

group = 'com.mycompany.app'
version = '2.0.004-SNAPSHOT'
description = 'qry'
java.sourceCompatibility = JavaVersion.VERSION_11

publishing {
    publications {
        maven(MavenPublication) {
            from(components.java)
        }
    }
}


tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

tasks.withType(Zip) {
   duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

jar {
	manifest {
		attributes 'Main-Class': 'gridServer.main'
	}
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    doLast {
        copy {
            from jar
            into "."
            rename {String fileName -> "qry.jar"}
        }
        copy {
            from jar
            into "."
        }
    }
}

task run(type: Exec) {
    dependsOn jar
    group = "Execution"
    description = "Run the mainClass from the output jar in classpath with ExecTask"
    commandLine "java", "-jar", jar.archiveFile.get()
}

/*
task copyJar(type: Copy) {
    //dependsOn(jar)
    from jar
    //from 'build/libs/qry-2.0.002-SNAPSHOT.jar'
    into "."
    //from('build/libs') // Assuming the JAR file is generated in the build/libs directory
    //into('../../') // Destination directory
    //into(projectDir)
    //include('*.jar') // Include only JAR files
}
//build.finalizedBy  copyJarToGenerated
jar.finalizedBy(copyJar)
*/

//
/*
task copyJar(type: Copy) {
    from('build/libs') // Assuming the JAR file is generated in the build/libs directory
    //into('../../') // Destination directory
    into(projectDir)
    include('*.jar') // Include only JAR files
}
*/

// Add the copyJar task as a dependency to the build task
//copyJar.dependsOn(jar)
//build.dependsOn(copyJar)

/*
task copyJarToBin(type:Copy,dependsOn:[jar]) {
    copy {
        from "${buildDir}/qry-2.0.002-SNAPSHOT.jar"  // needs to be gstring
        into "c:/_shared/"
    }
}
*/

/*
task copyJarToGenerated(type: Copy) {
    //from jar
    from 'build/libs/qry-2.0.002-SNAPSHOT.jar'
    into "C:/_shared"
}

jar.finalizedBy copyJarToGenerated

 */
//build.finalizedBy  copyJarToGenerated
//build.dependsOn  copyJarToGenerated





import org.apache.tools.ant.taskdefs.condition.Os
import java.text.SimpleDateFormat
import java.util.Date

// Function to get the last commit ID
def getLastCommitId() {
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim().substring(0,5)
}

def getLastCommit() {
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--abbrev-ref', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

def getLastCommitTimestamp() {
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'log', '-1', '--format=%ct'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}


def formatTimestamp(timestamp) {
    def date = new Date(Long.parseLong(timestamp) * 1000) // Convert from seconds to milliseconds
    def dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss")
    return dateFormat.format(date)
}

// Custom task to generate a properties file with the commit ID
task generateCommitProperties {
    doLast {
        def commitId = getLastCommitId()

        def propertiesFile = file("$buildDir/generated/source/version/commit.properties")
        propertiesFile.parentFile.mkdirs()

        propertiesFile.text = """
            commit.id=${commitId}
        """

        // -------------

        def commit = getLastCommit()
        def commitTimestamp = formatTimestamp( getLastCommitTimestamp() )

        def propertiesFile2 = file("static/commit.properties.js")
        propertiesFile2.parentFile.mkdirs()

        propertiesFile2.text = """commit_properties="${commit} - ${commitTimestamp} - ${commitId}...";
        """

    }
}

// Ensure the custom task runs before the Java compilation
compileJava.dependsOn generateCommitProperties

// Include the generated source directory in the resources set
sourceSets.main.resources.srcDirs += "$buildDir/generated/source/version"

